<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- This is the target that copies the test assets to the test output -->
  <Import Project="$(MSBuildThisFileDirectory)publishtest.targets" />
  <UsingTask TaskName="GetTargetMachineInfo" AssemblyFile="$(BuildToolsTaskDir)Microsoft.DotNet.Build.Tasks.dll"/>

    <!-- Which categories of tests to run by default -->
  <PropertyGroup>
    <TestDisabled>false</TestDisabled>
    <TestDisabled Condition="'$(IsTestProject)'!='true' Or '$(SkipTests)'=='true' Or '$(RunTestsForProject)'=='false'">true</TestDisabled>
    <TestsSuccessfulSemaphore>tests.passed</TestsSuccessfulSemaphore>
  </PropertyGroup>

  <!-- In case that TestPath is not yet set, default it here -->
  <PropertyGroup>
    <TestPath Condition="'$(TestPath)'==''">$(OutDir)</TestPath>
  </PropertyGroup>

  <ItemGroup>
    <!-- Split semicolon separated lists -->
    <WithCategoriesItems Include="$(WithCategories)" />
    <WithoutCategoriesItems Include="$(WithoutCategories)" />
    <DefaultNoCategories Include="$(DefaultNoCategories)" />
    <UnsupportedPlatformsItems Include="$(UnsupportedPlatforms)"/>
  </ItemGroup>
  
  <ItemGroup>
    <SupplementalTestData Include="$(RuntimePath)\xunit.console.netcore.exe" />
  </ItemGroup>

  <!-- Test with dotnet -->
  <PropertyGroup>
    <TestRuntimeDir>$(RuntimePath)</TestRuntimeDir>
    <TestHostExecutable Condition="'$(TestHostExecutable)' == ''">$(BinDir)dotnetcli\dotnet.exe</TestHostExecutable>
    <XunitExecutable Condition="'$(XunitExecutable)' == ''">$(TestPath)/xunit.console.netcore.exe</XunitExecutable>
  </PropertyGroup>

  <!-- General xunit options -->
  <PropertyGroup>
    <XunitResultsFileName>testResults.xml</XunitResultsFileName>

    <XunitOptions Condition="'$(TestWithCore)' != 'true'">$(XunitOptions) -noshadow </XunitOptions>
    <XunitOptions>$(XunitOptions) -xml $(XunitResultsFileName)</XunitOptions>

    <XunitOptions Condition="'$(Performance)'!='true'">$(XunitOptions) -notrait Benchmark=true</XunitOptions>

    <XunitOptions Condition="'$(UseDotNetNativeToolchain)'=='true'">$(XunitOptions) -redirectoutput</XunitOptions>

    <XunitOptions Condition="'$(TestTFM)'!=''">$(XunitOptions) -notrait category=non$(TestTFM)tests</XunitOptions>
    <XunitOptions Condition="'$(XunitMaxThreads)'!=''">$(XunitOptions) -maxthreads $(XunitMaxThreads)</XunitOptions>
    <XunitTestAssembly Condition="'$(XunitTestAssembly)' == ''">$(TargetPath)</XunitTestAssembly>
    <XunitArguments>$(XunitTestAssembly) $(XunitOptions)</XunitArguments>

    <TestProgram Condition="'$(TestHostExecutable)'!=''">$(TestHostExecutable)</TestProgram>
    <TestArguments Condition="'$(TestHostExecutable)'!=''">$(XunitExecutable) $(XunitArguments)</TestArguments>

    <TestProgram Condition="'$(TestHostExecutable)'==''">$(XunitExecutable)</TestProgram>
    <TestArguments Condition="'$(TestHostExecutable)'==''">$(XunitArguments)</TestArguments>

    <TestCommandLine Condition="'$(Performance)'!='true'">$(TestProgram) $(TestArguments) {XunitTraitOptions}</TestCommandLine>
  </PropertyGroup>
  
  <!-- This will generate a version of the dotnet cli that runs with the live
       build of corefx using the other components gathered from the stable 
       version consumed from the Tools directory 
  -->
  <Target Name="ConstructDotNetExe" Condition="!Exists('$(BinDir)dotnetcli')" >
    <PropertyGroup>
      <TestDotNetCliPath>$(BinDir)dotnetcli</TestDotNetCliPath>
    </PropertyGroup>
    <ItemGroup>
      <DotNetCliFiles Include="$(DotnetCliPath)\*.*" />
      <DotNetCliSharedFramework Include="$(DotnetCliPath)\shared\**\*.*" />
      <DotNetCliSharedFrameworkHost Include="$(DotnetCliPath)\host\**\*.*" />
      <DotNetCliSharedFrameworkSdk Include="$(DotnetCliPath)\sdk\**\*.*" />
      <DotNetCliSharedFrameworkSdkRuntimeConfig Include="$(TestDotNetCliPath)\sdk\**\dotnet.runtimeconfig.json" />
      <LiveDotNetCliComponents Include="$(RuntimePath)\*.*" Exclude="$(RuntimePath)\xunit.console.netcore.exe" />
    </ItemGroup>
  
    <Copy SourceFiles="@(DotNetCliFiles)" 
          DestinationFiles="@(DotNetCliFiles -> '$(TestDotNetCliPath)\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(DotNetCliSharedFrameworkHost)" 
          DestinationFiles="@(DotNetCliSharedFrameworkHost -> '$(TestDotNetCliPath)\host\%(RecursiveDir)%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(DotNetCliSharedFrameworkSdk)" 
          DestinationFiles="@(DotNetCliSharedFrameworkSdk -> '$(TestDotNetCliPath)\sdk\%(RecursiveDir)%(Filename)%(Extension)')" />
    <ItemGroup>     
      <DotNetCliSharedFrameworkSdkRuntimeConfig Include="$(TestDotNetCliPath)\sdk\**\dotnet.runtimeconfig.json" />
    </ItemGroup>
    <ReadLinesFromFile File="@(DotNetCliSharedFrameworkSdkRuntimeConfig)" >  
        <Output TaskParameter="Lines"  
                ItemName="LinesFromDotNetCliSharedFrameworkSdkRuntimeConfig"/> 
    </ReadLinesFromFile>
    <ItemGroup>
       <LinesToWriteDotNetCliSharedFrameworkSdkRuntimeConfig Include="$([System.String]::Copy('%(LinesFromDotNetCliSharedFrameworkSdkRuntimeConfig.Identity)').Replace('1.0.0','9.9.9'))" />
       <LinesToWriteDotNetCliSharedFrameworkSdkRuntimeConfig Include="};}" />
    </ItemGroup>
    <WriteLinesToFile  
            File="@(DotNetCliSharedFrameworkSdkRuntimeConfig)"  
            Lines="@(LinesToWriteDotNetCliSharedFrameworkSdkRuntimeConfig)"  
            Overwrite="true" />
    <Copy SourceFiles="@(DotNetCliSharedFrameworkSdkRuntimeConfig)" 
          DestinationFiles="@(DotNetCliSharedFrameworkSdkRuntimeConfig -> '$(ObjDir)\xunit\xunit.console.netcore.runtimeconfig.json')" />
    <Copy SourceFiles="@(DotNetCliSharedFramework)" 
          DestinationFiles="@(DotNetCliSharedFramework -> '$(TestDotNetCliPath)\shared\Microsoft.NETCore.App\9.9.9\%(Filename)%(Extension)')" />
    <Copy SourceFiles="@(LiveDotNetCliComponents)" 
          DestinationFiles="@(LiveDotNetCliComponents -> '$(TestDotNetCliPath)\shared\Microsoft.NETCore.App\9.9.9\%(Filename)%(Extension)')" />
  
    <ItemGroup>
      <OriginalDepsJsonPathItemGroup Include="$(TestDotNetCliPath)\shared\Microsoft.NETCore.App\9.9.9\*.deps.json" />
    </ItemGroup>
    <PropertyGroup>
      <OriginalDepsJsonPath>@(OriginalDepsJsonPathItemGroup)</OriginalDepsJsonPath>
    </PropertyGroup>
    <GenerateDepsJson DepsJsonPath="$(OriginalDepsJsonPath)" />
  </Target>

  <!-- The Code Coverage targets will override TestHost and TestCommandLine if coverage is enabled -->
  <Import Project="$(MSBuildThisFileDirectory)CodeCoverage.targets" />
  
  <Target Name="AddRuntimeConfig" >
    <ItemGroup>
       <SupplementalTestData Include="$(ObjDir)\xunit\xunit.console.netcore.runtimeconfig.json" />
    </ItemGroup>
    <Message Importance="High" Text="KARTHIKDEBUG2 '$(ObjDir)\xunit\xunit.console.netcore.runtimeconfig.json' '@(SupplementalTestData)'" />
  </Target>

  <Target Name="DiscoverTestInputs" DependsOnTargets="ResolveReferences;GetCopyToOutputDirectoryItems;AddRuntimeConfig" >
    <ItemGroup>
      <RunTestsForProjectInputs Include="@(ReferenceCopyLocalPaths)" />
      <RunTestsForProjectInputs Include="@(Content)" />
      <RunTestsForProjectInputs Include="@(IntermediateAssembly)" />
      <RunTestsForProjectInputs Include="@(_DebugSymbolsIntermediatePath)" />
      <RunTestsForProjectInputs Include="@(AllItemsFullPathWithTargetPath)" />
    </ItemGroup>
  </Target>

  <Target Name="RunTestsForProject"
          DependsOnTargets="DiscoverTestInputs;CheckTestCategories"
          Inputs="@(RunTestsForProjectInputs)"
          Outputs="$(TestsSuccessfulSemaphore);$(TestPath)/$(XunitResultsFileName);$(CoverageOutputFilePath)"
          >

    <ItemGroup>
      <RunWithoutTraits Condition="'$(TargetOS)'=='Windows_NT'" Include="nonwindowstests" />
      <RunWithoutTraits Condition="'$(TargetOS)'=='Linux'" Include="nonlinuxtests" />
      <RunWithoutTraits Condition="'$(TargetOS)'=='OSX'" Include="nonosxtests"/>
      <RunWithoutTraits Condition="'$(TargetOS)'=='FreeBSD'" Include="nonfreebsdtests"/>
      <RunWithoutTraits Condition="'$(TargetOS)'=='NetBSD'" Include="nonnetbsdtests"/>
    </ItemGroup>

    <PropertyGroup>
      <XunitTraitOptions Condition="'@(RunWithTraits)'!=''">$(XunitTraitOptions) -trait category=@(RunWithTraits, ' -trait category=') </XunitTraitOptions>
      <XunitTraitOptions Condition="'@(RunWithoutTraits)'!=''">$(XunitTraitOptions) -notrait category=@(RunWithoutTraits, ' -notrait category=') </XunitTraitOptions>
      <TestCommandLine>$(TestCommandLine.Replace('{XunitTraitOptions}', '$(XunitTraitOptions)'))</TestCommandLine>
    </PropertyGroup>

    <MakeDir Condition="'$(CoverageEnabledForProject)'=='true'" Directories="$(CoverageReportDir)" />

    <Exec Command="$(TestCommandLine)"
          Condition="'$(TestDisabled)' != 'true'"
          WorkingDirectory="$(OutDir)"
          CustomErrorRegularExpression="Failed: [^0]"
          ContinueOnError="true"
          IgnoreStandardErrorWarningFormat="true"
          EnvironmentVariables="CORE_LIBRARIES=$(OutDir)"
          >
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Error Condition="'$(TestDisabled)'!='true' And '$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check $(TestPath)$(XunitResultsFileName) for details!" />
    <Touch Condition="'$(TestRunExitCode)' == '0'" Files="$(TestsSuccessfulSemaphore)" AlwaysCreate="true" />
  </Target>

  <!-- Needs to run before RunTestsForProject target as it computes categories and set TestDisabled -->
  <Target Name="CheckTestCategories">

    <!-- Default behavior is to disable OuterLoop and failing tests if not specified in WithCategories. -->
    <ItemGroup>
      <DefaultNoCategories Condition="'$(Outerloop)'!='true'" Include="OuterLoop" />
      <DefaultNoCategories Include="failing" />
      <WithoutCategoriesItems Include="@(DefaultNoCategories)" Exclude="@(WithCategoriesItems)" />
      <WithoutCategoriesItemsDistinct Include="@(WithoutCategoriesItems->Distinct())" />
    </ItemGroup>

    <ItemGroup>
      <RunWithTraits Condition="'@(WithCategoriesItems)'!=''" Include="@(WithCategoriesItems)" />
      <RunWithoutTraits Condition="'@(WithoutCategoriesItemsDistinct)'!=''" Include="@(WithoutCategoriesItemsDistinct)" />
    </ItemGroup>

    <PropertyGroup>
      <TestsSuccessfulSemaphore Condition="'@(RunWithTraits)' != ''">$(TestsSuccessfulSemaphore).with.@(RunWithTraits, '.')</TestsSuccessfulSemaphore>
      <TestsSuccessfulSemaphore Condition="'@(RunWithoutTraits)' != ''">$(TestsSuccessfulSemaphore).without.@(RunWithoutTraits, '.')</TestsSuccessfulSemaphore>
      <TestsSuccessfulSemaphore>$(TestPath)/$(TestsSuccessfulSemaphore)</TestsSuccessfulSemaphore>
    </PropertyGroup>

    <Delete Condition="'$(ForceRunTests)'=='true' And Exists($(TestsSuccessfulSemaphore))"
            Files="$(TestsSuccessfulSemaphore)" />
  </Target>

  <Target Name="CheckTestPlatforms">
    <GetTargetMachineInfo Condition="'$(TargetOS)' == ''">
      <Output TaskParameter="TargetOS" PropertyName="TargetOS" />
    </GetTargetMachineInfo>
    <PropertyGroup>
      <TestDisabled Condition="'%(UnsupportedPlatformsItems.Identity)' == '$(TargetOS)'">true</TestDisabled>
    </PropertyGroup>
    <Message Condition="'%(UnsupportedPlatformsItems.Identity)' == '$(TargetOS)'"
      Text="Skipping tests in $(AssemblyName) because it is not supported on $(TargetOS)" />
  </Target>
  
  <Target Name="SetupTestProperties" DependsOnTargets="CheckTestPlatforms;CheckTestCategories" />

  <PropertyGroup>
    <TestDependsOn>
      $(TestDependsOn);
      ConstructDotNetExe;
      DiscoverTestInputs;
      SetupTestProperties;
      CopySupplementalTestData;
      RunTestsForProject;
    </TestDependsOn>
  </PropertyGroup>

  <Target Name="Test" DependsOnTargets="$(TestDependsOn)" />
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />

</Project>